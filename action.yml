name: 'Ai Pull Request Explainer'
description: 'Automatically generates PR descriptions by analyzing code diffs using LLMs like Gemini.'

inputs:
  GITHUB_TOKEN:
    description: 'GitHub token for Octokit'
    required: true
    default: ${{ github.token }} # مقدار پیش‌فرض کلیدی
  GEMINI_API_KEY:
    description: 'Gemini API Key'
    required: true

runs:
  using: 'composite'
  steps:
    - name: 0. Initial Echo (Bash Shell - Before Bun Setup)
      shell: bash
      run: |
        echo "--- Step 0: Initial Echo (GitHub Actions Runner context) ---"
        echo "INPUT_GITHUB_TOKEN (bash): '$INPUT_GITHUB_TOKEN'"
        echo "INPUT_GEMINI_API_KEY (bash): '$INPUT_GEMINI_API_KEY'"
        echo "github.action_path: '${{ github.action_path }}'"
        echo "github.workspace: '${{ github.workspace }}'"
        echo "--- Listing all INPUT_ environment variables: ---"
        printenv | grep INPUT_ || echo "(No INPUT_ vars found or grep failed)"
        echo "----------------------------------------------------"

    - name: 1. Setup Bun
      uses: oven-sh/setup-bun@v1

    - name: 2. Echo After Setup Bun (Bash Shell)
      shell: bash
      run: |
        echo "--- Step 2: After Setup Bun ---"
        echo "INPUT_GITHUB_TOKEN (bash): '$INPUT_GITHUB_TOKEN'"
        echo "INPUT_GEMINI_API_KEY (bash): '$INPUT_GEMINI_API_KEY'"
        echo "--- Listing all INPUT_ environment variables: ---"
        printenv | grep INPUT_ || echo "(No INPUT_ vars found or grep failed)"
        echo "-----------------------------"

    - name: 3. Install Dependencies
      shell: bash
      # working-directory را برای bun install مشخص می‌کنیم چون package.json آنجاست
      working-directory: ${{ github.action_path }}
      run: |
        echo "--- Step 3: Install Dependencies (current PWD: $(pwd)) ---"
        bun install --frozen-lockfile
        echo "-------------------------------------------------------"

    - name: 4. Echo After Install Dependencies (Bash Shell)
      shell: bash
      # working-directory را حفظ می‌کنیم تا محیط ثابت بماند
      working-directory: ${{ github.action_path }}
      run: |
        echo "--- Step 4: After Install Dependencies ---"
        echo "INPUT_GITHUB_TOKEN (bash): '$INPUT_GITHUB_TOKEN'"
        echo "INPUT_GEMINI_API_KEY (bash): '$INPUT_GEMINI_API_KEY'"
        echo "--- Listing all INPUT_ environment variables: ---"
        printenv | grep INPUT_ || echo "(No INPUT_ vars found or grep failed)"
        echo "----------------------------------------"

    - name: 5. Test with Bun Shell (bun sh)
      shell: bash # از bash برای فراخوانی bun sh استفاده می‌کنیم
      working-directory: ${{ github.action_path }}
      run: |
        echo "--- Step 5: Test with Bun Shell (bun sh) ---"
        # $INPUT_GITHUB_TOKEN باید در اینجا توسط 'bun sh' دیده شود
        bun sh -c 'echo "INPUT_GITHUB_TOKEN (from bun sh): \"$INPUT_GITHUB_TOKEN\""'
        bun sh -c 'echo "INPUT_GEMINI_API_KEY (from bun sh): \"$INPUT_GEMINI_API_KEY\""'
        echo "------------------------------------------"
        
    - name: 6. Run TypeScript with Bun (Main Script)
      shell: bash
      working-directory: ${{ github.action_path }}
      run: |
        echo "--- Step 6: Running Main TypeScript with Bun (just before execution) ---"
        echo "INPUT_GITHUB_TOKEN (bash, immediately before bun run): '$INPUT_GITHUB_TOKEN'"
        # اجرای اسکریپت اصلی شما
        bun run ${{ github.action_path }}/src/index.ts 
        echo "----------------------------------------------------------------------"
